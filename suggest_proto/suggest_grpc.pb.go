// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: suggest.proto

package suggest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SuggestServiceClient is the client API for SuggestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuggestServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	AddOne(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*Status, error)
	AddFile(ctx context.Context, in *CSV, opts ...grpc.CallOption) (*Status, error)
	GetOne(ctx context.Context, in *SuggestRequestIndex, opts ...grpc.CallOption) (*SuggestResponse, error)
	Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuggestResponse, error)
	DeleteOne(ctx context.Context, in *SuggestRequestIndex, opts ...grpc.CallOption) (*Status, error)
	Delete(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
}

type suggestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuggestServiceClient(cc grpc.ClientConnInterface) SuggestServiceClient {
	return &suggestServiceClient{cc}
}

func (c *suggestServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) AddOne(ctx context.Context, in *SuggestRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/AddOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) AddFile(ctx context.Context, in *CSV, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/AddFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) GetOne(ctx context.Context, in *SuggestRequestIndex, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) Get(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SuggestResponse, error) {
	out := new(SuggestResponse)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) DeleteOne(ctx context.Context, in *SuggestRequestIndex, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/DeleteOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestServiceClient) Delete(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/suggest.SuggestService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuggestServiceServer is the server API for SuggestService service.
// All implementations must embed UnimplementedSuggestServiceServer
// for forward compatibility
type SuggestServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	AddOne(context.Context, *SuggestRequest) (*Status, error)
	AddFile(context.Context, *CSV) (*Status, error)
	GetOne(context.Context, *SuggestRequestIndex) (*SuggestResponse, error)
	Get(context.Context, *Empty) (*SuggestResponse, error)
	DeleteOne(context.Context, *SuggestRequestIndex) (*Status, error)
	Delete(context.Context, *Empty) (*Status, error)
	mustEmbedUnimplementedSuggestServiceServer()
}

// UnimplementedSuggestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSuggestServiceServer struct {
}

func (UnimplementedSuggestServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSuggestServiceServer) AddOne(context.Context, *SuggestRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOne not implemented")
}
func (UnimplementedSuggestServiceServer) AddFile(context.Context, *CSV) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedSuggestServiceServer) GetOne(context.Context, *SuggestRequestIndex) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedSuggestServiceServer) Get(context.Context, *Empty) (*SuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSuggestServiceServer) DeleteOne(context.Context, *SuggestRequestIndex) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOne not implemented")
}
func (UnimplementedSuggestServiceServer) Delete(context.Context, *Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSuggestServiceServer) mustEmbedUnimplementedSuggestServiceServer() {}

// UnsafeSuggestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuggestServiceServer will
// result in compilation errors.
type UnsafeSuggestServiceServer interface {
	mustEmbedUnimplementedSuggestServiceServer()
}

func RegisterSuggestServiceServer(s grpc.ServiceRegistrar, srv SuggestServiceServer) {
	s.RegisterService(&SuggestService_ServiceDesc, srv)
}

func _SuggestService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_AddOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).AddOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/AddOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).AddOne(ctx, req.(*SuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/AddFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).AddFile(ctx, req.(*CSV))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequestIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).GetOne(ctx, req.(*SuggestRequestIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).Get(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_DeleteOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestRequestIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).DeleteOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/DeleteOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).DeleteOne(ctx, req.(*SuggestRequestIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuggestService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/suggest.SuggestService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestServiceServer).Delete(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SuggestService_ServiceDesc is the grpc.ServiceDesc for SuggestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuggestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "suggest.SuggestService",
	HandlerType: (*SuggestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SuggestService_Search_Handler,
		},
		{
			MethodName: "AddOne",
			Handler:    _SuggestService_AddOne_Handler,
		},
		{
			MethodName: "AddFile",
			Handler:    _SuggestService_AddFile_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _SuggestService_GetOne_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SuggestService_Get_Handler,
		},
		{
			MethodName: "DeleteOne",
			Handler:    _SuggestService_DeleteOne_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SuggestService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "suggest.proto",
}
